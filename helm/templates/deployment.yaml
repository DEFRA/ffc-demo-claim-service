apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app.component: {{ .Values.containers.service.name }}
  name: {{ .Values.containers.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  minReadySeconds: {{ .Values.minReadySeconds }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  template:
    metadata:
      labels:
        app.component: {{ .Values.containers.service.name }}
      annotations:
        redeployOnChange: "{{ .Values.containers.service.redeployOnChange }}"
    spec:
      containers:
      - name: {{ .Values.containers.service.name }}
        image: {{ if .Values.containers.service.registry }}{{ .Values.containers.service.registry }}/{{ end }}{{ .Values.containers.service.image }}:{{ .Values.containers.service.tag }}
        {{- if .Values.containers.command }}
        {{- with .Values.containers.command }}
          command:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- with .Values.containers.args }}
          args:
            {{- toYaml . | nindent 12 }}
        {{- end }}
        {{- end }}
        imagePullPolicy: {{ .Values.containers.service.imagePullPolicy }}
        env:
        - name: NODE_ENV
          value: {{ .Values.environment }}
        - name: POSTGRES_DB
          value: {{ .Values.postgresDatabase }}
        - name: POSTGRES_USERNAME
          value: {{ .Values.postgresUsername }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.postgresPassword }}
        - name: MINE_SUPPORT_MESSAGE_QUEUE
          value: {{ .Values.containers.service.messageQueue }}
        ports:
          - name: http
            containerPort: {{ .Values.containers.service.port }}
            protocol: TCP
        command: ["/bin/sh","-c"]
        args: ["sequelize db:migrate; node index"]
        resources:
          requests:
            memory: {{ .Values.containers.service.requestMemory | quote }}
            cpu: {{ .Values.containers.service.requestCpu | quote }}
          limits:
            memory: {{ .Values.containers.service.limitMemory | quote }}
            cpu: {{ .Values.containers.service.limitCpu | quote }}
        volumes:
      restartPolicy: {{ .Values.containers.service.restartPolicy }}
status: {}
