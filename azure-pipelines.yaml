trigger:
  tags:
    include:
    - v*
  branches:
    include:
    - master
pr:
- master

pool:
  vmImage: 'ubuntu-latest'
variables:
    azureContainerRegistry: jwminesupport
    azureContainerRegistryFull: jwminesupport.azurecr.io
    azureSubscriptionEndpoint: MineSupport
    azureResourceGroup: MineSupport
    kubernetesCluster: MineSupport
    imageName:  mine-support-claim-service
    containerTag: $(Build.SourceBranchName)
    safeContainerTag: $(Build.SourceBranchName)
    mergedPrNo:
steps:
  # extracts PR number from refs/pull/{prNo}/ branch name and sets to containerTag if pull request
- script: |
    IFS='/' read -r -a array <<< $BUILD_SOURCEBRANCH
    echo '##vso[task.setvariable variable=containerTag]pr'${array[2]}
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/pull'))
  displayName: set container tag if PR
  # extracts version number from refs/tags/{versionNo}/ branch name and sets to containerTag if release
- script: |
    IFS='/' read -r -a array <<< $BUILD_SOURCEBRANCH
    echo '##vso[task.setvariable variable=containerTag]'${array[2]}
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags'))
  displayName: set container tag if release
  # update helm charts tag and version if files ready for publishing chart
- script: |
    sed -i -e 's/image: mine-support/image: mine-support:$(containerTag)/' ./helm/values.yaml
    versionTag=`echo $(containerTag) | sed 's/v//'`
    sed -i -e 's/version: 1.0.0/version: '"$versionTag"'/' ./helm/Chart.yaml
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags'))
  displayName: update values and Chart yaml for release
  # create safe container tag for use in namespaces
- script: |
    safeContainerTag=`echo $(containerTag) | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]'`
    echo '##vso[task.setvariable variable=safeContainerTag]'$safeContainerTag
  displayName: set safe container tag as lower case container tag with illegal characters removed
  # extracts merged PR number from git log if a PR merge to master
- script: |
    gitLog=`git log --pretty=oneline --abbrev-commit -1`
    mergedPrNo=`echo $gitLog | sed -n 's/.*(#\([0-9]\+\)).*/\1/p'`
    echo '##vso[task.setvariable variable=mergedPrNo]'$mergedPrNo
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['Build.SourceBranchName'])))
  displayName: extracts merged PR number if merge to branch
  # create test folder
- script: |
    mkdir test-output
    chmod 777 test-output
  displayName: create test output directory
  # build test image
- task: DockerCompose@0
  inputs:
    containerregistrytype: Azure Container Registry
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistryFull)
    dockerComposeFile: docker-compose.yaml
    projectName: $(Build.Repository.Name)
    qualifyImageNames: true
    dockerComposeCommand: -f docker-compose.test.yaml build --no-cache $(imageName)
  displayName: build tests image
  # run tests
- task: DockerCompose@0
  inputs:
    containerregistrytype: Azure Container Registry
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistryFull)
    dockerComposeFile: docker-compose.yaml
    projectName: $(Build.Repository.Name)
    qualifyImageNames: true
    dockerComposeCommand: -f docker-compose.test.yaml up --force-recreate  $(imageName)
  displayName: run tests
  # build base image
- task: DockerCompose@0
  inputs:
    action: Build services
    containerregistrytype: Azure Container Registry
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistryFull)
    dockerComposeFile: docker-compose.yaml
    projectName: $(Build.Repository.Name)
    qualifyImageNames: true
    additionalImageTags: $(containerTag)
  displayName: build base image
  # push container to registry
- task: DockerCompose@0
  inputs:
    action: Push services
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureContainerRegistry: $(azureContainerRegistryFull)
    dockerComposeFile: docker-compose.yaml
    qualifyImageNames: true
    additionalImageTags: $(containerTag)
  displayName: Push container to registry
  # publish test results
- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: test-output/junit.xml
    failTaskOnFailedTests: true
    testRunTitle: Unit Test
  # deploy via helm
- task: HelmDeploy@0
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    namespace: $(imageName)-$(safeContainerTag)
    command: upgrade
    chartType: filepath
    chartPath: helm
    releaseName: $(imageName)-$(containerTag)
    overrideValues: 'container.messageQueueHost=$(messageQueueHost),container.messageQueuePort=$(messageQueuePort),container.messageQueueTransport=$(messageQueueTransport),container.messageQueueUser=$(messageQueueUser),container.messageQueuePassword=$(messageQueuePassword),postgresExternalName=$(postgresExternalName),postgresPassword=$(postgresPassword),postgresUsername=$(postgresUsername)'
    arguments: --set image=$(azureContainerRegistryFull)/$(imageName):$(containerTag) --set container.redeployOnChange=$(Build.BuildId) --set container.imagePullPolicy=Always --atomic
    install: true
    recreate: true
    waitForExecution: true
  displayName: Helm deploy
  # delete helm chart of closed PR
- task: HelmDeploy@0
  condition: and(succeeded(), ne(variables['mergedPrNo'], ''))
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: delete
    arguments: --purge $(imageName)-pr$(mergedPrNo)
  displayName: delete Helm chart of closed PR
  # delete PR image from registry if merge to master
- task: AzureCLI@1
  condition: and(succeeded(), ne(variables['mergedPrNo'], ''))
  inputs:
    azureSubscription: $(azureSubscriptionEndpoint)
    scriptLocation: inlineScript
    inlineScript: |
      az acr repository delete --name $(azureContainerRegistry) --image $(imageName):pr$(mergedPrNo) -y
    failOnStandardError: false
  displayName: remove merged PR image
  # add Helm chart to registry for a release
- task: AzureCLI@1
  condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags'))
  inputs:
    azureSubscription: $(azureSubscriptionEndpoint)
    scriptLocation: inlineScript
    inlineScript: |
      helm init -c
      az configure --defaults acr=$(azureContainerRegistry)
      az acr helm repo add
      helm package ./helm --save
      packageFile=`ls elm-rbac-* |  xargs echo`
      az acr helm push --force $packageFile
      az acr helm list
    failOnStandardError: false
  displayName: add Helm chart to registry
# delete merged PR namespace from cluster
- task: Kubernetes@1
  condition: and(succeeded(), ne(variables['mergedPrNo'], ''))
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: delete
    arguments: namespaces $(imageName)-pr$(mergedPrNo)
  displayName: delete merged PR namespace
  # display namepace of deployed build
- script: |
    echo "Build available for review in namespace $(imageName)-$(containerTag)"
  displayName: display namespace of deployed build
  # install helm on build agent
- task: HelmInstaller@0
  displayName: 'Install Helm 2.9.1'
  inputs:
    helmVersion: 2.9.1
  # package helm chart for release
- task: HelmDeploy@0
  displayName: 'helm package'
  inputs:
    command: package
    chartPath: ./helm
    save: false
  # copy yaml values for release
- task: CopyFiles@2
  displayName: 'Copy values files'
  inputs:
    SourceFolder: helm
    Contents: '*-values.yaml'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
  # publish artifact for release
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts: drop'
